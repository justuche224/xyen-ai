import { QuizDataSchema, TheoryQuizDataSchema } from '../../types/index.js';
import path from 'path';
import { fileURLToPath } from 'url';
// Get the directory name of the current module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
// Use file paths instead of importing font files
var fonts = {
    Roboto: {
        normal: path.resolve(__dirname, './fonts/Roboto-Regular.ttf'),
        bold: path.resolve(__dirname, './fonts/Roboto-Medium.ttf'),
        italics: path.resolve(__dirname, './fonts/Roboto-Italic.ttf'),
        bolditalics: path.resolve(__dirname, './fonts/Roboto-MediumItalic.ttf')
    }
};
import PdfPrinter from 'pdfmake';
const printer = new PdfPrinter(fonts);
export async function generateQuizPDFWithPdfMake(quizData, quizTitle, quizType, quizTags) {
    try {
        if (quizType === 'theory') {
            TheoryQuizDataSchema.parse(quizData);
        }
        else {
            QuizDataSchema.parse(quizData);
        }
    }
    catch (error) {
        console.error('Invalid quiz data:', error);
        throw new Error('Quiz data validation failed');
    }
    const isTheory = quizType === 'theory';
    const docDefinition = {
        info: {
            title: quizTitle,
            author: 'Xyen AI',
            subject: 'Quiz PDF',
            keywords: quizTags ? quizTags.join(', ') : '',
        },
        footer: function (currentPage, pageCount) {
            return {
                columns: [
                    { text: `Page ${currentPage} of ${pageCount}`, alignment: 'left', margin: [40, 10, 0, 20], fontSize: 9 },
                    { text: 'Generated by Xyen AI', alignment: 'right', margin: [0, 10, 40, 20], fontSize: 9, italics: true }
                ],
            };
        },
        content: [
            { text: quizTitle, style: 'header', alignment: 'center' },
            {
                text: `Quiz Type: ${quizType.toUpperCase().replace('-', ' ')}`,
                style: 'subheader',
                margin: [0, 0, 0, 10],
            },
            {
                text: `Total Questions: ${quizData.length}`,
                style: 'subheader',
                margin: [0, 0, 0, 20],
            },
            ...quizData.map((q, idx) => {
                if (isTheory) {
                    const tq = q;
                    return {
                        margin: [0, 10, 0, 10],
                        stack: [
                            { text: `Question ${idx + 1}`, style: 'questionHeader' },
                            { text: tq.text },
                            {
                                text: `Answer: ${tq.answer}`,
                                style: 'answerBlock',
                            },
                        ],
                    };
                }
                else {
                    const oq = q;
                    return {
                        margin: [0, 10, 0, 10],
                        stack: [
                            { text: `Question ${idx + 1}`, style: 'questionHeader' },
                            { text: oq.text },
                            {
                                ul: oq.choices.map((choice, i) => {
                                    const letter = String.fromCharCode(65 + i);
                                    return {
                                        text: `${letter}. ${choice.text}`,
                                        style: choice.isCorrect ? 'correctChoice' : 'choice',
                                    };
                                }),
                            },
                        ],
                    };
                }
            }),
        ],
        styles: {
            header: {
                fontSize: 20,
                bold: true,
                margin: [0, 20, 0, 10],
                color: '#007bff',
            },
            subheader: {
                fontSize: 12,
                bold: false,
                color: '#666',
            },
            questionHeader: {
                fontSize: 14,
                bold: true,
                margin: [0, 5, 0, 5],
                color: '#007bff',
            },
            answerBlock: {
                margin: [0, 5, 0, 5],
                italics: true,
                color: '#28a745',
            },
            correctChoice: {
                color: '#28a745',
                bold: true,
                margin: [0, 2, 0, 2],
            },
            choice: {
                margin: [0, 2, 0, 2],
            },
        },
        defaultStyle: {
            fontSize: 11,
        },
        pageMargins: [40, 60, 40, 80],
    };
    return new Promise((resolve, reject) => {
        const pdfDoc = printer.createPdfKitDocument(docDefinition);
        const chunks = [];
        pdfDoc.on('data', (chunk) => {
            chunks.push(chunk);
        });
        pdfDoc.on('end', () => {
            const pdfBuffer = Buffer.concat(chunks);
            const pdfUint8Array = new Uint8Array(pdfBuffer);
            resolve(pdfUint8Array);
        });
        pdfDoc.on('error', (error) => {
            reject(error);
        });
        pdfDoc.end();
    });
}
